#!/usr/bin/env python3
# coding: UTF-8
# Copyright (c) 2020-2024 Matus Chochlik
# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or copy at
#  http://www.boost.org/LICENSE_1_0.txt

import os
import re
import json
import time
import gzip
import flask
import gevent
import argparse

# ------------------------------------------------------------------------------
class ArgumentParser(argparse.ArgumentParser):
    # --------------------------------------------------------------------------
    def __init__(self, **kw):
        argparse.ArgumentParser.__init__(self, **kw)

        def max_cache_size(x):
            try:
                p = int(float(x) * 2 ** 30)
                if (p > 0):
                    return p
                self.error("'%f' is not a valid max cache size" % (p))
            except TypeError:
                self.error("max cache size must be a numeric value greater than 0")

        def port_number(x):
            try:
                p = int(x)
                if (p > 1) and (p < 2 ** 16):
                    return p
                self.error("'%d' is not a valid port number" % (p))
            except TypeError:
                self.error("port number must be an integer value" )

        self.add_argument(
            "--port", "-P",
            dest="port",
            metavar="NUMBER",
            type=port_number,
            default=5000,
            help="""
            Specifies the port number (5000) by default.
            """
        )

        self.add_argument(
            "--cache-dir", "-S",
            dest="cache_dir",
            metavar="SAVE-PATH",
            type=os.path.realpath,
            default=os.path.join(os.path.expanduser("~"), ".cache", "ctcache"),
            help="""
            Specifies the path to the cache directory.
            """
        )

        self.add_argument(
            "--max-cache-size", "-M",
            dest="max_cache_size",
            metavar="NUMBER",
            type=max_cache_size,
            default=5,
            help="""
            Specifies the max size of cached file in gigabytes.
            """
        )

        self.add_argument(
            "--debug", "-D",
            dest="debug_mode",
            action="store_true",
            default=False,
            help="""
            Starts the service in debug mode.
            """
        )

    # --------------------------------------------------------------------------
    def process_parsed_options(self, options):
        return options

    # --------------------------------------------------------------------------
    def parse_args(self):
        return self.process_parsed_options(
            argparse.ArgumentParser.parse_args(self)
        )

# ------------------------------------------------------------------------------
def get_argument_parser():
    return ArgumentParser(
        prog=os.path.basename(__file__),
        description="""server maintaining cached values for clang-tidy-cache"""
    )

# ------------------------------------------------------------------------------
class CacheFile():
    # --------------------------------------------------------------------------
    def __init__(self, path, name):
        self._path = os.path.join(path, name)
        self._name = name

    # --------------------------------------------------------------------------
    def save(self, data):
        f = open(self.path(), 'w')
        f.write(data)
        f.close()

    # --------------------------------------------------------------------------
    def read(self):
        f = open(self.path(), 'r')
        return f.read()

    # --------------------------------------------------------------------------
    def remove(self):
        os.remove(self.path())

    # --------------------------------------------------------------------------
    def size(self):
        return os.path.getsize(self.path())

    # --------------------------------------------------------------------------
    def path(self):
        return self._path

    # --------------------------------------------------------------------------
    def name(self):
        return self._name

# ------------------------------------------------------------------------------
class CacheDirectory():
    # --------------------------------------------------------------------------
    def __init__(self, path):
        self._path = path
        self._cache_path = os.path.join(path, "cache")
        self._stats_path = os.path.join(path, "stats")
        self._stats_json = os.path.join(path, "ctcache.json.gz")
        self._chart_path = os.path.join(path, "chart")

        os.makedirs(self._path, exist_ok=True)
        os.makedirs(self._cache_path, exist_ok=True)
        os.makedirs(self._stats_path, exist_ok=True)
        os.makedirs(self._chart_path, exist_ok=True)

    # --------------------------------------------------------------------------
    def get_cache_file(self, hashstr):
        return CacheFile(self.get_cache_dir(), hashstr)

    # --------------------------------------------------------------------------
    def get_all_cache_files(self):
        cache_file_names = os.listdir(self.get_cache_dir())

        result = []
        for cache_file_name in cache_file_names:
            cache_file = self.get_cache_file(cache_file_name)
            if os.path.isfile(cache_file.path()):
                result.append(cache_file)

        return result

    # --------------------------------------------------------------------------
    def get_all_cache_files_size(self):
        size = 0
        for cache_file in self.get_all_cache_files():
            size += cache_file.size()
        return size

    # --------------------------------------------------------------------------
    def remove_all_cache_files(self):
        for cache_file in self.get_all_cache_files():
            cache_file.remove()

    # --------------------------------------------------------------------------
    def get_cache_dir(self):
        return self._cache_path

    # --------------------------------------------------------------------------
    def get_stats_dir(self):
        return self._stats_path

    # --------------------------------------------------------------------------
    def get_stats_json(self):
        return self._stats_json

    # --------------------------------------------------------------------------
    def get_chart_dir(self):
        return self._chart_path

# ------------------------------------------------------------------------------
class CacheStat():
    # --------------------------------------------------------------------------
    def __init__(self, name):
        current_time = time.time()

        self._name = name
        self._hit_count = 0
        self._access_time = current_time
        self._create_time = current_time

    # --------------------------------------------------------------------------
    def name(self):
        return self._name

    # --------------------------------------------------------------------------
    def hit_count(self):
        return self._hit_count

    # --------------------------------------------------------------------------
    def access_time(self):
        return self._access_time

    # --------------------------------------------------------------------------
    def create_time(self):
        return self._create_time

    # --------------------------------------------------------------------------
    def update(self):
        self._hit_count += 1
        self._access_time = time.time()

# ------------------------------------------------------------------------------
class CacheStats():
    # --------------------------------------------------------------------------
    def __init__(self):
        self._stats = dict()
        self._hit_count = 0
        self._miss_count = 0
        self._cleaned_count = 0

    # --------------------------------------------------------------------------
    def save(self, filename):
        # TODO
        pass

    # --------------------------------------------------------------------------
    def load(self, filename):
        # TODO
        pass

    # --------------------------------------------------------------------------
    def is_cached(self, name):
        if not name in self._stats:
            self._increase_miss_count()
            return False

        self._increase_hit_count()
        self._stats[name].update()
        return True

    # --------------------------------------------------------------------------
    def cache(self, name):
        self._stats[name] = CacheStat(name)

    # --------------------------------------------------------------------------
    def remove(self, name):
        if not name in self._stats:
            return

        del self._stats[name]
        self._increase_cleaned_count()

    # --------------------------------------------------------------------------
    def get_all(self):
        return list(self._stats.keys())

    # --------------------------------------------------------------------------
    def hit_count(self):
        return self._hit_count

    # --------------------------------------------------------------------------
    def hit_rate(self):
        total_count = self._miss_count + self._hit_count
        if total_count == 0:
            return None
        return self._hit_count / total_count

    # --------------------------------------------------------------------------
    def miss_count(self):
        return self._miss_count

    # --------------------------------------------------------------------------
    def miss_rate(self):
        total_count = self._miss_count + self._hit_count
        if total_count == 0:
            return None
        return self._miss_count / total_count

    # --------------------------------------------------------------------------
    def cached_count(self):
        return len(self._stats)

    # --------------------------------------------------------------------------
    def cleaned_count(self):
        return self._cleaned_count

    # --------------------------------------------------------------------------
    def _increase_hit_count(self):
        self._hit_count += 1

    # --------------------------------------------------------------------------
    def _increase_miss_count(self):
        self._miss_count += 1

    # --------------------------------------------------------------------------
    def _increase_cleaned_count(self):
        self._cleaned_count += 1

# ------------------------------------------------------------------------------
class SystemStats():
    # --------------------------------------------------------------------------
    def __init__(self):
        current_time = time.time()

        self._start_time = current_time
        self._last_save_time = current_time
        self._last_clean_time = current_time

    def uptime(self):
        return time.time() - self._start_time

    def last_save_time_ago(self):
        return time.time() - self._last_save_time

    def update_last_save_time(self):
        self._last_save_time = time.time()

    def last_clean_time_ago(self):
        return time.time() - self._last_clean_time

    def update_last_clean_time(self):
        self._last_clean_time = time.time()

# ------------------------------------------------------------------------------
class HashValidator():
    # --------------------------------------------------------------------------
    def __init__(self):
        self._regexp = re.compile(r'^[0-9a-fA-F]{40}$')

    # --------------------------------------------------------------------------
    def is_valid(self, name):
        return self._regexp.match(name)

# ------------------------------------------------------------------------------
class ClangTidyCache(object):
    # --------------------------------------------------------------------------
    def __init__(self, options):
        self._cache = CacheDirectory(options.cache_dir)
        self._cache_stats = CacheStats()
        self._system_stats = SystemStats()
        self._hash_validator = HashValidator()

    # --------------------------------------------------------------------------
    def is_valid_hash(self, name):
        return self._hash_validator.is_valid(name)

    # --------------------------------------------------------------------------
    def is_cached(self, name):
        return self._cache_stats.is_cached(name)

    # --------------------------------------------------------------------------
    def save_cache(self, name, data):
        self._cache_stats.cache(name)
        self._cache.get_cache_file(name).save(data)

    # --------------------------------------------------------------------------
    def get_cache(self, name):
        if not self.is_cached(name):
            return None
        return self._cache.get_cache_file(name).read()

    # --------------------------------------------------------------------------
    def remove_cache(self, name):
        self._cache_stats.remove(name)
        self._cache.get_cache_file(name).remove()

    # --------------------------------------------------------------------------
    def purge_cache(self):
        for name in self._cache_stats.get_all():
            self.remove_cache(name)

    # --------------------------------------------------------------------------
    def get_cache_size(self):
        return self._cache.get_all_cache_files_size()

    # --------------------------------------------------------------------------
    def get_cache_stats(self):
        return self._cache_stats

    # --------------------------------------------------------------------------
    def get_system_stats(self):
        return self._system_stats

    # --------------------------------------------------------------------------
    def _do_save(self):
        self._system_stats.update_last_save_time()

    # --------------------------------------------------------------------------
    def _do_clean(self):
        self._system_stats.update_last_clean_time()

# ------------------------------------------------------------------------------
class ClangTidyCacheApp(flask.Flask):
    # --------------------------------------------------------------------------
    def __init__(self):
        flask.Flask.__init__(self, "clang-tidy-cache")

# ------------------------------------------------------------------------------
clang_tidy_cache = None
app = ClangTidyCacheApp()

# ------------------------------------------------------------------------------
@app.route("/cache/<name>", methods=['GET', 'PUT'])
def route_cache(name):
    if not clang_tidy_cache.is_valid_hash(name):
        return flask.abort(400)

    if flask.request.method == 'GET':
        cache = clang_tidy_cache.get_cache(name)
        if cache != None:
            return cache
        return flask.abort(404)

    if flask.request.method == 'PUT':
        data = flask.request.form['data']
        clang_tidy_cache.save_cache(name, data)
        return "true"

    return flask.abort(500)

# ------------------------------------------------------------------------------
@app.route("/is_cached/<name>")
def route_is_cached(name):
    return "true" if clang_tidy_cache.is_cached(name) else "false"

# ------------------------------------------------------------------------------
@app.route("/purge_cache")
def route_purge_cache():
    clang_tidy_cache.purge_cache()
    return "true"

# ------------------------------------------------------------------------------
@app.route("/stats/cached_count")
def route_stats_cached_count():
    return str(clang_tidy_cache.get_cache_stats().cached_count())

# ------------------------------------------------------------------------------
@app.route("/stats/cleaned_count")
def route_stats_cleaned_count():
    return str(clang_tidy_cache.get_cache_stats().cleaned_count())

# ------------------------------------------------------------------------------
@app.route("/stats/hit_count")
def route_stats_hit_count():
    return str(clang_tidy_cache.get_cache_stats().hit_count())

# ------------------------------------------------------------------------------
@app.route("/stats/miss_count")
def route_stats_miss_count():
    return str(clang_tidy_cache.get_cache_stats().miss_count())

# ------------------------------------------------------------------------------
@app.route("/stats/hit_rate")
def route_stats_hit_rate():
    return str(clang_tidy_cache.get_cache_stats().hit_rate())

# ------------------------------------------------------------------------------
@app.route("/stats/miss_rate")
def route_stats_miss_rate():
    return str(clang_tidy_cache.get_cache_stats().miss_rate())

# ------------------------------------------------------------------------------
@app.route("/stats")
def route_stats():
    cache_stats = clang_tidy_cache.get_cache_stats()
    system_stats = clang_tidy_cache.get_system_stats()
    return json.dumps({
            "uptime": system_stats.uptime(),
            "last_save_time_ago": system_stats.last_save_time_ago(),
            "last_clean_time_ago": system_stats.last_clean_time_ago(),
            "hit_count": cache_stats.hit_count(),
            "hit_rate": cache_stats.hit_rate(),
            "miss_count": cache_stats.miss_count(),
            "miss_rate": cache_stats.miss_rate(),
            "cached_count": cache_stats.cached_count(),
            "cleaned_count": cache_stats.cleaned_count(),
            "cache_size": clang_tidy_cache.get_cache_size()
        })

# ------------------------------------------------------------------------------
if __name__ == "__main__":
    options = get_argument_parser().parse_args()
    clang_tidy_cache = ClangTidyCache(options)

    host = "0.0.0.0"
    port = options.port

    if options.debug_mode:
        app.run(debug=True, host=host, port=port)
    else:
        from gevent.pywsgi import WSGIServer
        srvr = WSGIServer((host, port), app)
        try: srvr.serve_forever()
        except KeyboardInterrupt:
            pass
# ------------------------------------------------------------------------------
